using Zergatul.Math;

namespace Zergatul.Cryptography.Asymmetric
{
    public class DiffieHellmanParameters : AbstractParameters
    {
        public int KeySize => p.BitSize;

        /// <summary>
        /// Generator
        /// </summary>
        public BigInteger g { get; private set; }

        /// <summary>
        /// Prime
        /// </summary>
        public BigInteger p { get; private set; }

        public byte[] g_Raw { get; private set; }
        public byte[] p_Raw { get; private set; }

        public DiffieHellmanParameters(BigInteger g, BigInteger p)
        {
            this.g = g;
            this.p = p;
            CalcGRaw();
            CalcPRaw();
        }

        public DiffieHellmanParameters(byte[] g, byte[] p)
        {
            this.g_Raw = g;
            this.p_Raw = p;
            CalcG();
            CalcP();
        }

        private void CalcG() => g = new BigInteger(g_Raw, ByteOrder.BigEndian);
        private void CalcP() => p = new BigInteger(p_Raw, ByteOrder.BigEndian);
        private void CalcGRaw() => g_Raw = g.ToBytes(ByteOrder.BigEndian);
        private void CalcPRaw() => p_Raw = p.ToBytes(ByteOrder.BigEndian);

        #region Groups

        /// <summary>
        /// RFC 2409, key size - 768 bits
        /// </summary>
        public static readonly DiffieHellmanParameters Group1 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xC90FDAA2, 0x2168C234, 0xC4C6628B, 0x80DC1CD1,
                0x29024E08, 0x8A67CC74, 0x020BBEA6, 0x3B139B22, 0x514A0879, 0x8E3404DD,
                0xEF9519B3, 0xCD3A431B, 0x302B0A6D, 0xF25F1437, 0x4FE1356D, 0x6D51C245,
                0xE485B576, 0x625E7EC6, 0xF44C42E9, 0xA63A3620, 0xFFFFFFFF, 0xFFFFFFFF,
            }, ByteOrder.BigEndian));

        /// <summary>
        /// RFC 2409, key size - 1024 bits
        /// </summary>
        public static readonly DiffieHellmanParameters Group2 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xC90FDAA2, 0x2168C234, 0xC4C6628B, 0x80DC1CD1,
                0x29024E08, 0x8A67CC74, 0x020BBEA6, 0x3B139B22, 0x514A0879, 0x8E3404DD,
                0xEF9519B3, 0xCD3A431B, 0x302B0A6D, 0xF25F1437, 0x4FE1356D, 0x6D51C245,
                0xE485B576, 0x625E7EC6, 0xF44C42E9, 0xA637ED6B, 0x0BFF5CB6, 0xF406B7ED,
                0xEE386BFB, 0x5A899FA5, 0xAE9F2411, 0x7C4B1FE6, 0x49286651, 0xECE65381,
                0xFFFFFFFF, 0xFFFFFFFF,
            }, ByteOrder.BigEndian));

        /// <summary>
        /// RFC 3526, key size - 1536 bits
        /// </summary>
        public static readonly DiffieHellmanParameters Group5 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xC90FDAA2, 0x2168C234, 0xC4C6628B, 0x80DC1CD1,
                0x29024E08, 0x8A67CC74, 0x020BBEA6, 0x3B139B22, 0x514A0879, 0x8E3404DD,
                0xEF9519B3, 0xCD3A431B, 0x302B0A6D, 0xF25F1437, 0x4FE1356D, 0x6D51C245,
                0xE485B576, 0x625E7EC6, 0xF44C42E9, 0xA637ED6B, 0x0BFF5CB6, 0xF406B7ED,
                0xEE386BFB, 0x5A899FA5, 0xAE9F2411, 0x7C4B1FE6, 0x49286651, 0xECE45B3D,
                0xC2007CB8, 0xA163BF05, 0x98DA4836, 0x1C55D39A, 0x69163FA8, 0xFD24CF5F,
                0x83655D23, 0xDCA3AD96, 0x1C62F356, 0x208552BB, 0x9ED52907, 0x7096966D,
                0x670C354E, 0x4ABC9804, 0xF1746C08, 0xCA237327, 0xFFFFFFFF, 0xFFFFFFFF,
            }, ByteOrder.BigEndian));

        /// <summary>
        /// RFC 3526, key size - 2048 bits
        /// </summary>
        public static readonly DiffieHellmanParameters Group14 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xC90FDAA2, 0x2168C234, 0xC4C6628B, 0x80DC1CD1,
                0x29024E08, 0x8A67CC74, 0x020BBEA6, 0x3B139B22, 0x514A0879, 0x8E3404DD,
                0xEF9519B3, 0xCD3A431B, 0x302B0A6D, 0xF25F1437, 0x4FE1356D, 0x6D51C245,
                0xE485B576, 0x625E7EC6, 0xF44C42E9, 0xA637ED6B, 0x0BFF5CB6, 0xF406B7ED,
                0xEE386BFB, 0x5A899FA5, 0xAE9F2411, 0x7C4B1FE6, 0x49286651, 0xECE45B3D,
                0xC2007CB8, 0xA163BF05, 0x98DA4836, 0x1C55D39A, 0x69163FA8, 0xFD24CF5F,
                0x83655D23, 0xDCA3AD96, 0x1C62F356, 0x208552BB, 0x9ED52907, 0x7096966D,
                0x670C354E, 0x4ABC9804, 0xF1746C08, 0xCA18217C, 0x32905E46, 0x2E36CE3B,
                0xE39E772C, 0x180E8603, 0x9B2783A2, 0xEC07A28F, 0xB5C55DF0, 0x6F4C52C9,
                0xDE2BCBF6, 0x95581718, 0x3995497C, 0xEA956AE5, 0x15D22618, 0x98FA0510,
                0x15728E5A, 0x8AACAA68, 0xFFFFFFFF, 0xFFFFFFFF,
            }, ByteOrder.BigEndian));

        /// <summary>
        /// RFC 3526, key size - 3072 bits
        /// </summary>
        public static readonly DiffieHellmanParameters Group15 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xC90FDAA2, 0x2168C234, 0xC4C6628B, 0x80DC1CD1,
                0x29024E08, 0x8A67CC74, 0x020BBEA6, 0x3B139B22, 0x514A0879, 0x8E3404DD,
                0xEF9519B3, 0xCD3A431B, 0x302B0A6D, 0xF25F1437, 0x4FE1356D, 0x6D51C245,
                0xE485B576, 0x625E7EC6, 0xF44C42E9, 0xA637ED6B, 0x0BFF5CB6, 0xF406B7ED,
                0xEE386BFB, 0x5A899FA5, 0xAE9F2411, 0x7C4B1FE6, 0x49286651, 0xECE45B3D,
                0xC2007CB8, 0xA163BF05, 0x98DA4836, 0x1C55D39A, 0x69163FA8, 0xFD24CF5F,
                0x83655D23, 0xDCA3AD96, 0x1C62F356, 0x208552BB, 0x9ED52907, 0x7096966D,
                0x670C354E, 0x4ABC9804, 0xF1746C08, 0xCA18217C, 0x32905E46, 0x2E36CE3B,
                0xE39E772C, 0x180E8603, 0x9B2783A2, 0xEC07A28F, 0xB5C55DF0, 0x6F4C52C9,
                0xDE2BCBF6, 0x95581718, 0x3995497C, 0xEA956AE5, 0x15D22618, 0x98FA0510,
                0x15728E5A, 0x8AAAC42D, 0xAD33170D, 0x04507A33, 0xA85521AB, 0xDF1CBA64,
                0xECFB8504, 0x58DBEF0A, 0x8AEA7157, 0x5D060C7D, 0xB3970F85, 0xA6E1E4C7,
                0xABF5AE8C, 0xDB0933D7, 0x1E8C94E0, 0x4A25619D, 0xCEE3D226, 0x1AD2EE6B,
                0xF12FFA06, 0xD98A0864, 0xD8760273, 0x3EC86A64, 0x521F2B18, 0x177B200C,
                0xBBE11757, 0x7A615D6C, 0x770988C0, 0xBAD946E2, 0x08E24FA0, 0x74E5AB31,
                0x43DB5BFC, 0xE0FD108E, 0x4B82D120, 0xA93AD2CA, 0xFFFFFFFF, 0xFFFFFFFF,
            }, ByteOrder.BigEndian));

        /// <summary>
        /// RFC 3526, key size - 4096 bits
        /// </summary>
        public static readonly DiffieHellmanParameters Group16 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xC90FDAA2, 0x2168C234, 0xC4C6628B, 0x80DC1CD1,
                0x29024E08, 0x8A67CC74, 0x020BBEA6, 0x3B139B22, 0x514A0879, 0x8E3404DD,
                0xEF9519B3, 0xCD3A431B, 0x302B0A6D, 0xF25F1437, 0x4FE1356D, 0x6D51C245,
                0xE485B576, 0x625E7EC6, 0xF44C42E9, 0xA637ED6B, 0x0BFF5CB6, 0xF406B7ED,
                0xEE386BFB, 0x5A899FA5, 0xAE9F2411, 0x7C4B1FE6, 0x49286651, 0xECE45B3D,
                0xC2007CB8, 0xA163BF05, 0x98DA4836, 0x1C55D39A, 0x69163FA8, 0xFD24CF5F,
                0x83655D23, 0xDCA3AD96, 0x1C62F356, 0x208552BB, 0x9ED52907, 0x7096966D,
                0x670C354E, 0x4ABC9804, 0xF1746C08, 0xCA18217C, 0x32905E46, 0x2E36CE3B,
                0xE39E772C, 0x180E8603, 0x9B2783A2, 0xEC07A28F, 0xB5C55DF0, 0x6F4C52C9,
                0xDE2BCBF6, 0x95581718, 0x3995497C, 0xEA956AE5, 0x15D22618, 0x98FA0510,
                0x15728E5A, 0x8AAAC42D, 0xAD33170D, 0x04507A33, 0xA85521AB, 0xDF1CBA64,
                0xECFB8504, 0x58DBEF0A, 0x8AEA7157, 0x5D060C7D, 0xB3970F85, 0xA6E1E4C7,
                0xABF5AE8C, 0xDB0933D7, 0x1E8C94E0, 0x4A25619D, 0xCEE3D226, 0x1AD2EE6B,
                0xF12FFA06, 0xD98A0864, 0xD8760273, 0x3EC86A64, 0x521F2B18, 0x177B200C,
                0xBBE11757, 0x7A615D6C, 0x770988C0, 0xBAD946E2, 0x08E24FA0, 0x74E5AB31,
                0x43DB5BFC, 0xE0FD108E, 0x4B82D120, 0xA9210801, 0x1A723C12, 0xA787E6D7,
                0x88719A10, 0xBDBA5B26, 0x99C32718, 0x6AF4E23C, 0x1A946834, 0xB6150BDA,
                0x2583E9CA, 0x2AD44CE8, 0xDBBBC2DB, 0x04DE8EF9, 0x2E8EFC14, 0x1FBECAA6,
                0x287C5947, 0x4E6BC05D, 0x99B2964F, 0xA090C3A2, 0x233BA186, 0x515BE7ED,
                0x1F612970, 0xCEE2D7AF, 0xB81BDD76, 0x2170481C, 0xD0069127, 0xD5B05AA9,
                0x93B4EA98, 0x8D8FDDC1, 0x86FFB7DC, 0x90A6C08F, 0x4DF435C9, 0x34063199,
                0xFFFFFFFF, 0xFFFFFFFF,
            }, ByteOrder.BigEndian));

        /// <summary>
        /// RFC 3526, key size - 6144 bits
        /// </summary>
        public static readonly DiffieHellmanParameters Group17 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xC90FDAA2, 0x2168C234, 0xC4C6628B, 0x80DC1CD1, 0x29024E08,
                0x8A67CC74, 0x020BBEA6, 0x3B139B22, 0x514A0879, 0x8E3404DD, 0xEF9519B3, 0xCD3A431B,
                0x302B0A6D, 0xF25F1437, 0x4FE1356D, 0x6D51C245, 0xE485B576, 0x625E7EC6, 0xF44C42E9,
                0xA637ED6B, 0x0BFF5CB6, 0xF406B7ED, 0xEE386BFB, 0x5A899FA5, 0xAE9F2411, 0x7C4B1FE6,
                0x49286651, 0xECE45B3D, 0xC2007CB8, 0xA163BF05, 0x98DA4836, 0x1C55D39A, 0x69163FA8,
                0xFD24CF5F, 0x83655D23, 0xDCA3AD96, 0x1C62F356, 0x208552BB, 0x9ED52907, 0x7096966D,
                0x670C354E, 0x4ABC9804, 0xF1746C08, 0xCA18217C, 0x32905E46, 0x2E36CE3B, 0xE39E772C,
                0x180E8603, 0x9B2783A2, 0xEC07A28F, 0xB5C55DF0, 0x6F4C52C9, 0xDE2BCBF6, 0x95581718,
                0x3995497C, 0xEA956AE5, 0x15D22618, 0x98FA0510, 0x15728E5A, 0x8AAAC42D, 0xAD33170D,
                0x04507A33, 0xA85521AB, 0xDF1CBA64, 0xECFB8504, 0x58DBEF0A, 0x8AEA7157, 0x5D060C7D,
                0xB3970F85, 0xA6E1E4C7, 0xABF5AE8C, 0xDB0933D7, 0x1E8C94E0, 0x4A25619D, 0xCEE3D226,
                0x1AD2EE6B, 0xF12FFA06, 0xD98A0864, 0xD8760273, 0x3EC86A64, 0x521F2B18, 0x177B200C,
                0xBBE11757, 0x7A615D6C, 0x770988C0, 0xBAD946E2, 0x08E24FA0, 0x74E5AB31, 0x43DB5BFC,
                0xE0FD108E, 0x4B82D120, 0xA9210801, 0x1A723C12, 0xA787E6D7, 0x88719A10, 0xBDBA5B26,
                0x99C32718, 0x6AF4E23C, 0x1A946834, 0xB6150BDA, 0x2583E9CA, 0x2AD44CE8, 0xDBBBC2DB,
                0x04DE8EF9, 0x2E8EFC14, 0x1FBECAA6, 0x287C5947, 0x4E6BC05D, 0x99B2964F, 0xA090C3A2,
                0x233BA186, 0x515BE7ED, 0x1F612970, 0xCEE2D7AF, 0xB81BDD76, 0x2170481C, 0xD0069127,
                0xD5B05AA9, 0x93B4EA98, 0x8D8FDDC1, 0x86FFB7DC, 0x90A6C08F, 0x4DF435C9, 0x34028492,
                0x36C3FAB4, 0xD27C7026, 0xC1D4DCB2, 0x602646DE, 0xC9751E76, 0x3DBA37BD, 0xF8FF9406,
                0xAD9E530E, 0xE5DB382F, 0x413001AE, 0xB06A53ED, 0x9027D831, 0x179727B0, 0x865A8918,
                0xDA3EDBEB, 0xCF9B14ED, 0x44CE6CBA, 0xCED4BB1B, 0xDB7F1447, 0xE6CC254B, 0x33205151,
                0x2BD7AF42, 0x6FB8F401, 0x378CD2BF, 0x5983CA01, 0xC64B92EC, 0xF032EA15, 0xD1721D03,
                0xF482D7CE, 0x6E74FEF6, 0xD55E702F, 0x46980C82, 0xB5A84031, 0x900B1C9E, 0x59E7C97F,
                0xBEC7E8F3, 0x23A97A7E, 0x36CC88BE, 0x0F1D45B7, 0xFF585AC5, 0x4BD407B2, 0x2B4154AA,
                0xCC8F6D7E, 0xBF48E1D8, 0x14CC5ED2, 0x0F8037E0, 0xA79715EE, 0xF29BE328, 0x06A1D58B,
                0xB7C5DA76, 0xF550AA3D, 0x8A1FBFF0, 0xEB19CCB1, 0xA313D55C, 0xDA56C9EC, 0x2EF29632,
                0x387FE8D7, 0x6E3C0468, 0x043E8F66, 0x3F4860EE, 0x12BF2D5B, 0x0B7474D6, 0xE694F91E,
                0x6DCC4024, 0xFFFFFFFF, 0xFFFFFFFF,
            }, ByteOrder.BigEndian));

        /// <summary>
        /// RFC 3526, key size - 8192 bits
        /// </summary>
        public static readonly DiffieHellmanParameters Group18 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xC90FDAA2, 0x2168C234, 0xC4C6628B, 0x80DC1CD1,
                0x29024E08, 0x8A67CC74, 0x020BBEA6, 0x3B139B22, 0x514A0879, 0x8E3404DD,
                0xEF9519B3, 0xCD3A431B, 0x302B0A6D, 0xF25F1437, 0x4FE1356D, 0x6D51C245,
                0xE485B576, 0x625E7EC6, 0xF44C42E9, 0xA637ED6B, 0x0BFF5CB6, 0xF406B7ED,
                0xEE386BFB, 0x5A899FA5, 0xAE9F2411, 0x7C4B1FE6, 0x49286651, 0xECE45B3D,
                0xC2007CB8, 0xA163BF05, 0x98DA4836, 0x1C55D39A, 0x69163FA8, 0xFD24CF5F,
                0x83655D23, 0xDCA3AD96, 0x1C62F356, 0x208552BB, 0x9ED52907, 0x7096966D,
                0x670C354E, 0x4ABC9804, 0xF1746C08, 0xCA18217C, 0x32905E46, 0x2E36CE3B,
                0xE39E772C, 0x180E8603, 0x9B2783A2, 0xEC07A28F, 0xB5C55DF0, 0x6F4C52C9,
                0xDE2BCBF6, 0x95581718, 0x3995497C, 0xEA956AE5, 0x15D22618, 0x98FA0510,
                0x15728E5A, 0x8AAAC42D, 0xAD33170D, 0x04507A33, 0xA85521AB, 0xDF1CBA64,
                0xECFB8504, 0x58DBEF0A, 0x8AEA7157, 0x5D060C7D, 0xB3970F85, 0xA6E1E4C7,
                0xABF5AE8C, 0xDB0933D7, 0x1E8C94E0, 0x4A25619D, 0xCEE3D226, 0x1AD2EE6B,
                0xF12FFA06, 0xD98A0864, 0xD8760273, 0x3EC86A64, 0x521F2B18, 0x177B200C,
                0xBBE11757, 0x7A615D6C, 0x770988C0, 0xBAD946E2, 0x08E24FA0, 0x74E5AB31,
                0x43DB5BFC, 0xE0FD108E, 0x4B82D120, 0xA9210801, 0x1A723C12, 0xA787E6D7,
                0x88719A10, 0xBDBA5B26, 0x99C32718, 0x6AF4E23C, 0x1A946834, 0xB6150BDA,
                0x2583E9CA, 0x2AD44CE8, 0xDBBBC2DB, 0x04DE8EF9, 0x2E8EFC14, 0x1FBECAA6,
                0x287C5947, 0x4E6BC05D, 0x99B2964F, 0xA090C3A2, 0x233BA186, 0x515BE7ED,
                0x1F612970, 0xCEE2D7AF, 0xB81BDD76, 0x2170481C, 0xD0069127, 0xD5B05AA9,
                0x93B4EA98, 0x8D8FDDC1, 0x86FFB7DC, 0x90A6C08F, 0x4DF435C9, 0x34028492,
                0x36C3FAB4, 0xD27C7026, 0xC1D4DCB2, 0x602646DE, 0xC9751E76, 0x3DBA37BD,
                0xF8FF9406, 0xAD9E530E, 0xE5DB382F, 0x413001AE, 0xB06A53ED, 0x9027D831,
                0x179727B0, 0x865A8918, 0xDA3EDBEB, 0xCF9B14ED, 0x44CE6CBA, 0xCED4BB1B,
                0xDB7F1447, 0xE6CC254B, 0x33205151, 0x2BD7AF42, 0x6FB8F401, 0x378CD2BF,
                0x5983CA01, 0xC64B92EC, 0xF032EA15, 0xD1721D03, 0xF482D7CE, 0x6E74FEF6,
                0xD55E702F, 0x46980C82, 0xB5A84031, 0x900B1C9E, 0x59E7C97F, 0xBEC7E8F3,
                0x23A97A7E, 0x36CC88BE, 0x0F1D45B7, 0xFF585AC5, 0x4BD407B2, 0x2B4154AA,
                0xCC8F6D7E, 0xBF48E1D8, 0x14CC5ED2, 0x0F8037E0, 0xA79715EE, 0xF29BE328,
                0x06A1D58B, 0xB7C5DA76, 0xF550AA3D, 0x8A1FBFF0, 0xEB19CCB1, 0xA313D55C,
                0xDA56C9EC, 0x2EF29632, 0x387FE8D7, 0x6E3C0468, 0x043E8F66, 0x3F4860EE,
                0x12BF2D5B, 0x0B7474D6, 0xE694F91E, 0x6DBE1159, 0x74A3926F, 0x12FEE5E4,
                0x38777CB6, 0xA932DF8C, 0xD8BEC4D0, 0x73B931BA, 0x3BC832B6, 0x8D9DD300,
                0x741FA7BF, 0x8AFC47ED, 0x2576F693, 0x6BA42466, 0x3AAB639C, 0x5AE4F568,
                0x3423B474, 0x2BF1C978, 0x238F16CB, 0xE39D652D, 0xE3FDB8BE, 0xFC848AD9,
                0x22222E04, 0xA4037C07, 0x13EB57A8, 0x1A23F0C7, 0x3473FC64, 0x6CEA306B,
                0x4BCBC886, 0x2F8385DD, 0xFA9D4B7F, 0xA2C087E8, 0x79683303, 0xED5BDD3A,
                0x062B3CF5, 0xB3A278A6, 0x6D2A13F8, 0x3F44F82D, 0xDF310EE0, 0x74AB6A36,
                0x4597E899, 0xA0255DC1, 0x64F31CC5, 0x0846851D, 0xF9AB4819, 0x5DED7EA1,
                0xB1D510BD, 0x7EE74D73, 0xFAF36BC3, 0x1ECFA268, 0x359046F4, 0xEB879F92,
                0x4009438B, 0x481C6CD7, 0x889A002E, 0xD5EE382B, 0xC9190DA6, 0xFC026E47,
                0x9558E447, 0x5677E9AA, 0x9E3050E2, 0x765694DF, 0xC81F56E8, 0x80B96E71,
                0x60C980DD, 0x98EDD3DF, 0xFFFFFFFF, 0xFFFFFFFF,
            }, ByteOrder.BigEndian));

        /// <summary>
        /// https://tools.ietf.org/html/rfc7919#appendix-A.1
        /// </summary>
        public static readonly DiffieHellmanParameters ffdhe2048 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xADF85458, 0xA2BB4A9A, 0xAFDC5620, 0x273D3CF1,
                0xD8B9C583, 0xCE2D3695, 0xA9E13641, 0x146433FB, 0xCC939DCE, 0x249B3EF9,
                0x7D2FE363, 0x630C75D8, 0xF681B202, 0xAEC4617A, 0xD3DF1ED5, 0xD5FD6561,
                0x2433F51F, 0x5F066ED0, 0x85636555, 0x3DED1AF3, 0xB557135E, 0x7F57C935,
                0x984F0C70, 0xE0E68B77, 0xE2A689DA, 0xF3EFE872, 0x1DF158A1, 0x36ADE735,
                0x30ACCA4F, 0x483A797A, 0xBC0AB182, 0xB324FB61, 0xD108A94B, 0xB2C8E3FB,
                0xB96ADAB7, 0x60D7F468, 0x1D4F42A3, 0xDE394DF4, 0xAE56EDE7, 0x6372BB19,
                0x0B07A7C8, 0xEE0A6D70, 0x9E02FCE1, 0xCDF7E2EC, 0xC03404CD, 0x28342F61,
                0x9172FE9C, 0xE98583FF, 0x8E4F1232, 0xEEF28183, 0xC3FE3B1B, 0x4C6FAD73,
                0x3BB5FCBC, 0x2EC22005, 0xC58EF183, 0x7D1683B2, 0xC6F34A26, 0xC1B2EFFA,
                0x886B4238, 0x61285C97, 0xFFFFFFFF, 0xFFFFFFFF
            }, ByteOrder.BigEndian));

        /// <summary>
        /// https://tools.ietf.org/html/rfc7919#appendix-A.2
        /// </summary>
        public static readonly DiffieHellmanParameters ffdhe3072 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xADF85458, 0xA2BB4A9A, 0xAFDC5620, 0x273D3CF1,
                0xD8B9C583, 0xCE2D3695, 0xA9E13641, 0x146433FB, 0xCC939DCE, 0x249B3EF9,
                0x7D2FE363, 0x630C75D8, 0xF681B202, 0xAEC4617A, 0xD3DF1ED5, 0xD5FD6561,
                0x2433F51F, 0x5F066ED0, 0x85636555, 0x3DED1AF3, 0xB557135E, 0x7F57C935,
                0x984F0C70, 0xE0E68B77, 0xE2A689DA, 0xF3EFE872, 0x1DF158A1, 0x36ADE735,
                0x30ACCA4F, 0x483A797A, 0xBC0AB182, 0xB324FB61, 0xD108A94B, 0xB2C8E3FB,
                0xB96ADAB7, 0x60D7F468, 0x1D4F42A3, 0xDE394DF4, 0xAE56EDE7, 0x6372BB19,
                0x0B07A7C8, 0xEE0A6D70, 0x9E02FCE1, 0xCDF7E2EC, 0xC03404CD, 0x28342F61,
                0x9172FE9C, 0xE98583FF, 0x8E4F1232, 0xEEF28183, 0xC3FE3B1B, 0x4C6FAD73,
                0x3BB5FCBC, 0x2EC22005, 0xC58EF183, 0x7D1683B2, 0xC6F34A26, 0xC1B2EFFA,
                0x886B4238, 0x611FCFDC, 0xDE355B3B, 0x6519035B, 0xBC34F4DE, 0xF99C0238,
                0x61B46FC9, 0xD6E6C907, 0x7AD91D26, 0x91F7F7EE, 0x598CB0FA, 0xC186D91C,
                0xAEFE1309, 0x85139270, 0xB4130C93, 0xBC437944, 0xF4FD4452, 0xE2D74DD3,
                0x64F2E21E, 0x71F54BFF, 0x5CAE82AB, 0x9C9DF69E, 0xE86D2BC5, 0x22363A0D,
                0xABC52197, 0x9B0DEADA, 0x1DBF9A42, 0xD5C4484E, 0x0ABCD06B, 0xFA53DDEF,
                0x3C1B20EE, 0x3FD59D7C, 0x25E41D2B, 0x66C62E37, 0xFFFFFFFF, 0xFFFFFFFF
            }, ByteOrder.BigEndian));

        /// <summary>
        /// https://tools.ietf.org/html/rfc7919#appendix-A.3
        /// </summary>
        public static readonly DiffieHellmanParameters ffdhe4096 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xADF85458, 0xA2BB4A9A, 0xAFDC5620, 0x273D3CF1,
                0xD8B9C583, 0xCE2D3695, 0xA9E13641, 0x146433FB, 0xCC939DCE, 0x249B3EF9,
                0x7D2FE363, 0x630C75D8, 0xF681B202, 0xAEC4617A, 0xD3DF1ED5, 0xD5FD6561,
                0x2433F51F, 0x5F066ED0, 0x85636555, 0x3DED1AF3, 0xB557135E, 0x7F57C935,
                0x984F0C70, 0xE0E68B77, 0xE2A689DA, 0xF3EFE872, 0x1DF158A1, 0x36ADE735,
                0x30ACCA4F, 0x483A797A, 0xBC0AB182, 0xB324FB61, 0xD108A94B, 0xB2C8E3FB,
                0xB96ADAB7, 0x60D7F468, 0x1D4F42A3, 0xDE394DF4, 0xAE56EDE7, 0x6372BB19,
                0x0B07A7C8, 0xEE0A6D70, 0x9E02FCE1, 0xCDF7E2EC, 0xC03404CD, 0x28342F61,
                0x9172FE9C, 0xE98583FF, 0x8E4F1232, 0xEEF28183, 0xC3FE3B1B, 0x4C6FAD73,
                0x3BB5FCBC, 0x2EC22005, 0xC58EF183, 0x7D1683B2, 0xC6F34A26, 0xC1B2EFFA,
                0x886B4238, 0x611FCFDC, 0xDE355B3B, 0x6519035B, 0xBC34F4DE, 0xF99C0238,
                0x61B46FC9, 0xD6E6C907, 0x7AD91D26, 0x91F7F7EE, 0x598CB0FA, 0xC186D91C,
                0xAEFE1309, 0x85139270, 0xB4130C93, 0xBC437944, 0xF4FD4452, 0xE2D74DD3,
                0x64F2E21E, 0x71F54BFF, 0x5CAE82AB, 0x9C9DF69E, 0xE86D2BC5, 0x22363A0D,
                0xABC52197, 0x9B0DEADA, 0x1DBF9A42, 0xD5C4484E, 0x0ABCD06B, 0xFA53DDEF,
                0x3C1B20EE, 0x3FD59D7C, 0x25E41D2B, 0x669E1EF1, 0x6E6F52C3, 0x164DF4FB,
                0x7930E9E4, 0xE58857B6, 0xAC7D5F42, 0xD69F6D18, 0x7763CF1D, 0x55034004,
                0x87F55BA5, 0x7E31CC7A, 0x7135C886, 0xEFB4318A, 0xED6A1E01, 0x2D9E6832,
                0xA907600A, 0x918130C4, 0x6DC778F9, 0x71AD0038, 0x092999A3, 0x33CB8B7A,
                0x1A1DB93D, 0x7140003C, 0x2A4ECEA9, 0xF98D0ACC, 0x0A8291CD, 0xCEC97DCF,
                0x8EC9B55A, 0x7F88A46B, 0x4DB5A851, 0xF44182E1, 0xC68A007E, 0x5E655F6A,
                0xFFFFFFFF, 0xFFFFFFFF
            }, ByteOrder.BigEndian));

        /// <summary>
        /// https://tools.ietf.org/html/rfc7919#appendix-A.4
        /// </summary>
        public static readonly DiffieHellmanParameters ffdhe6144 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xADF85458, 0xA2BB4A9A, 0xAFDC5620, 0x273D3CF1,
                0xD8B9C583, 0xCE2D3695, 0xA9E13641, 0x146433FB, 0xCC939DCE, 0x249B3EF9,
                0x7D2FE363, 0x630C75D8, 0xF681B202, 0xAEC4617A, 0xD3DF1ED5, 0xD5FD6561,
                0x2433F51F, 0x5F066ED0, 0x85636555, 0x3DED1AF3, 0xB557135E, 0x7F57C935,
                0x984F0C70, 0xE0E68B77, 0xE2A689DA, 0xF3EFE872, 0x1DF158A1, 0x36ADE735,
                0x30ACCA4F, 0x483A797A, 0xBC0AB182, 0xB324FB61, 0xD108A94B, 0xB2C8E3FB,
                0xB96ADAB7, 0x60D7F468, 0x1D4F42A3, 0xDE394DF4, 0xAE56EDE7, 0x6372BB19,
                0x0B07A7C8, 0xEE0A6D70, 0x9E02FCE1, 0xCDF7E2EC, 0xC03404CD, 0x28342F61,
                0x9172FE9C, 0xE98583FF, 0x8E4F1232, 0xEEF28183, 0xC3FE3B1B, 0x4C6FAD73,
                0x3BB5FCBC, 0x2EC22005, 0xC58EF183, 0x7D1683B2, 0xC6F34A26, 0xC1B2EFFA,
                0x886B4238, 0x611FCFDC, 0xDE355B3B, 0x6519035B, 0xBC34F4DE, 0xF99C0238,
                0x61B46FC9, 0xD6E6C907, 0x7AD91D26, 0x91F7F7EE, 0x598CB0FA, 0xC186D91C,
                0xAEFE1309, 0x85139270, 0xB4130C93, 0xBC437944, 0xF4FD4452, 0xE2D74DD3,
                0x64F2E21E, 0x71F54BFF, 0x5CAE82AB, 0x9C9DF69E, 0xE86D2BC5, 0x22363A0D,
                0xABC52197, 0x9B0DEADA, 0x1DBF9A42, 0xD5C4484E, 0x0ABCD06B, 0xFA53DDEF,
                0x3C1B20EE, 0x3FD59D7C, 0x25E41D2B, 0x669E1EF1, 0x6E6F52C3, 0x164DF4FB,
                0x7930E9E4, 0xE58857B6, 0xAC7D5F42, 0xD69F6D18, 0x7763CF1D, 0x55034004,
                0x87F55BA5, 0x7E31CC7A, 0x7135C886, 0xEFB4318A, 0xED6A1E01, 0x2D9E6832,
                0xA907600A, 0x918130C4, 0x6DC778F9, 0x71AD0038, 0x092999A3, 0x33CB8B7A,
                0x1A1DB93D, 0x7140003C, 0x2A4ECEA9, 0xF98D0ACC, 0x0A8291CD, 0xCEC97DCF,
                0x8EC9B55A, 0x7F88A46B, 0x4DB5A851, 0xF44182E1, 0xC68A007E, 0x5E0DD902,
                0x0BFD64B6, 0x45036C7A, 0x4E677D2C, 0x38532A3A, 0x23BA4442, 0xCAF53EA6,
                0x3BB45432, 0x9B7624C8, 0x917BDD64, 0xB1C0FD4C, 0xB38E8C33, 0x4C701C3A,
                0xCDAD0657, 0xFCCFEC71, 0x9B1F5C3E, 0x4E46041F, 0x388147FB, 0x4CFDB477,
                0xA52471F7, 0xA9A96910, 0xB855322E, 0xDB6340D8, 0xA00EF092, 0x350511E3,
                0x0ABEC1FF, 0xF9E3A26E, 0x7FB29F8C, 0x183023C3, 0x587E38DA, 0x0077D9B4,
                0x763E4E4B, 0x94B2BBC1, 0x94C6651E, 0x77CAF992, 0xEEAAC023, 0x2A281BF6,
                0xB3A739C1, 0x22611682, 0x0AE8DB58, 0x47A67CBE, 0xF9C9091B, 0x462D538C,
                0xD72B0374, 0x6AE77F5E, 0x62292C31, 0x1562A846, 0x505DC82D, 0xB854338A,
                0xE49F5235, 0xC95B9117, 0x8CCF2DD5, 0xCACEF403, 0xEC9D1810, 0xC6272B04,
                0x5B3B71F9, 0xDC6B80D6, 0x3FDD4A8E, 0x9ADB1E69, 0x62A69526, 0xD43161C1,
                0xA41D570D, 0x7938DAD4, 0xA40E329C, 0xD0E40E65, 0xFFFFFFFF, 0xFFFFFFFF
            }, ByteOrder.BigEndian));

        /// <summary>
        /// https://tools.ietf.org/html/rfc7919#appendix-A.5
        /// </summary>
        public static readonly DiffieHellmanParameters ffdhe8192 = new DiffieHellmanParameters(
            new BigInteger(2),
            new BigInteger(new uint[]
            {
                0xFFFFFFFF, 0xFFFFFFFF, 0xADF85458, 0xA2BB4A9A, 0xAFDC5620, 0x273D3CF1,
                0xD8B9C583, 0xCE2D3695, 0xA9E13641, 0x146433FB, 0xCC939DCE, 0x249B3EF9,
                0x7D2FE363, 0x630C75D8, 0xF681B202, 0xAEC4617A, 0xD3DF1ED5, 0xD5FD6561,
                0x2433F51F, 0x5F066ED0, 0x85636555, 0x3DED1AF3, 0xB557135E, 0x7F57C935,
                0x984F0C70, 0xE0E68B77, 0xE2A689DA, 0xF3EFE872, 0x1DF158A1, 0x36ADE735,
                0x30ACCA4F, 0x483A797A, 0xBC0AB182, 0xB324FB61, 0xD108A94B, 0xB2C8E3FB,
                0xB96ADAB7, 0x60D7F468, 0x1D4F42A3, 0xDE394DF4, 0xAE56EDE7, 0x6372BB19,
                0x0B07A7C8, 0xEE0A6D70, 0x9E02FCE1, 0xCDF7E2EC, 0xC03404CD, 0x28342F61,
                0x9172FE9C, 0xE98583FF, 0x8E4F1232, 0xEEF28183, 0xC3FE3B1B, 0x4C6FAD73,
                0x3BB5FCBC, 0x2EC22005, 0xC58EF183, 0x7D1683B2, 0xC6F34A26, 0xC1B2EFFA,
                0x886B4238, 0x611FCFDC, 0xDE355B3B, 0x6519035B, 0xBC34F4DE, 0xF99C0238,
                0x61B46FC9, 0xD6E6C907, 0x7AD91D26, 0x91F7F7EE, 0x598CB0FA, 0xC186D91C,
                0xAEFE1309, 0x85139270, 0xB4130C93, 0xBC437944, 0xF4FD4452, 0xE2D74DD3,
                0x64F2E21E, 0x71F54BFF, 0x5CAE82AB, 0x9C9DF69E, 0xE86D2BC5, 0x22363A0D,
                0xABC52197, 0x9B0DEADA, 0x1DBF9A42, 0xD5C4484E, 0x0ABCD06B, 0xFA53DDEF,
                0x3C1B20EE, 0x3FD59D7C, 0x25E41D2B, 0x669E1EF1, 0x6E6F52C3, 0x164DF4FB,
                0x7930E9E4, 0xE58857B6, 0xAC7D5F42, 0xD69F6D18, 0x7763CF1D, 0x55034004,
                0x87F55BA5, 0x7E31CC7A, 0x7135C886, 0xEFB4318A, 0xED6A1E01, 0x2D9E6832,
                0xA907600A, 0x918130C4, 0x6DC778F9, 0x71AD0038, 0x092999A3, 0x33CB8B7A,
                0x1A1DB93D, 0x7140003C, 0x2A4ECEA9, 0xF98D0ACC, 0x0A8291CD, 0xCEC97DCF,
                0x8EC9B55A, 0x7F88A46B, 0x4DB5A851, 0xF44182E1, 0xC68A007E, 0x5E0DD902,
                0x0BFD64B6, 0x45036C7A, 0x4E677D2C, 0x38532A3A, 0x23BA4442, 0xCAF53EA6,
                0x3BB45432, 0x9B7624C8, 0x917BDD64, 0xB1C0FD4C, 0xB38E8C33, 0x4C701C3A,
                0xCDAD0657, 0xFCCFEC71, 0x9B1F5C3E, 0x4E46041F, 0x388147FB, 0x4CFDB477,
                0xA52471F7, 0xA9A96910, 0xB855322E, 0xDB6340D8, 0xA00EF092, 0x350511E3,
                0x0ABEC1FF, 0xF9E3A26E, 0x7FB29F8C, 0x183023C3, 0x587E38DA, 0x0077D9B4,
                0x763E4E4B, 0x94B2BBC1, 0x94C6651E, 0x77CAF992, 0xEEAAC023, 0x2A281BF6,
                0xB3A739C1, 0x22611682, 0x0AE8DB58, 0x47A67CBE, 0xF9C9091B, 0x462D538C,
                0xD72B0374, 0x6AE77F5E, 0x62292C31, 0x1562A846, 0x505DC82D, 0xB854338A,
                0xE49F5235, 0xC95B9117, 0x8CCF2DD5, 0xCACEF403, 0xEC9D1810, 0xC6272B04,
                0x5B3B71F9, 0xDC6B80D6, 0x3FDD4A8E, 0x9ADB1E69, 0x62A69526, 0xD43161C1,
                0xA41D570D, 0x7938DAD4, 0xA40E329C, 0xCFF46AAA, 0x36AD004C, 0xF600C838,
                0x1E425A31, 0xD951AE64, 0xFDB23FCE, 0xC9509D43, 0x687FEB69, 0xEDD1CC5E,
                0x0B8CC3BD, 0xF64B10EF, 0x86B63142, 0xA3AB8829, 0x555B2F74, 0x7C932665,
                0xCB2C0F1C, 0xC01BD702, 0x29388839, 0xD2AF05E4, 0x54504AC7, 0x8B758282,
                0x2846C0BA, 0x35C35F5C, 0x59160CC0, 0x46FD8251, 0x541FC68C, 0x9C86B022,
                0xBB709987, 0x6A460E74, 0x51A8A931, 0x09703FEE, 0x1C217E6C, 0x3826E52C,
                0x51AA691E, 0x0E423CFC, 0x99E9E316, 0x50C1217B, 0x624816CD, 0xAD9A95F9,
                0xD5B80194, 0x88D9C0A0, 0xA1FE3075, 0xA577E231, 0x83F81D4A, 0x3F2FA457,
                0x1EFC8CE0, 0xBA8A4FE8, 0xB6855DFE, 0x72B0A66E, 0xDED2FBAB, 0xFBE58A30,
                0xFAFABE1C, 0x5D71A87E, 0x2F741EF8, 0xC1FE86FE, 0xA6BBFDE5, 0x30677F0D,
                0x97D11D49, 0xF7A8443D, 0x0822E506, 0xA9F4614E, 0x011E2A94, 0x838FF88C,
                0xD68C8BB7, 0xC5C6424C, 0xFFFFFFFF, 0xFFFFFFFF
            }, ByteOrder.BigEndian));

        #endregion
    }
}